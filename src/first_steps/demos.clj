;;A little namespace to demonstrate
;;proximately useful clojure functions
;;and idioms to aid in solving
;;bootstrapping problems and puzzles.
(ns first-steps.demos)

(def alphabet
  ["a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s"
   "t" "u" "v" "w" "x" "y" "z"])

;;note: the alphabet can be trivially typed in, or easily generated by mapping
;;over the ascii char codes:

#_(->> (range (int \a) (int \z))
       (map (comp str char))
       vec)

;;clojure.core/subs is a powerful function for
;;string manipulation.  Combined with clojure.core/str,
;;we can use it to define arbitrary transforms on
;;strings by selecting regions and conjoining them
;;with additional input.  This is one way to define
;;string transforms.  There are many (to include
;;using character seqs - which are amneable to
;;sequence functions and recombination with str,
;;but are slow in practice) such as
;;regex-based operations and other tools in
;;clojure.string.

(defn set-character
  "Given a string s, and a valid index idx, return
   a string identical to s, except for character placed
   at the index in s."
  [s idx character]
  (str (subs s 0 idx)
       character
       (subs s (inc idx) (count s))))

(defn substitutions
  "given string s, and idx denoting a position, generate all
   variations of s based on changing characters from the alphabet
   at idx"
  [s idx]
  (let [old (nth s idx)]
    (->> alphabet
         (filter #(not= % old))
         (map #(set-character s idx %)))))

;;first-steps.demo>=>(substitutions "hello" 0)
;;("aello" "bello" "cello" "dello" "eello" "fello" "gello" "iello" "jello" "kello"
;; "lello" "mello" "nello" "oello" "pello" "qello" "rello" "sello" "tello" "uello"
;; "vello" "wello" "xello" "yello" "zello")
